import pandas as pd

from sklearn import linear_model
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
dataset= pd.read_csv('Weather.csv')



features = ['precipitation','temp_max','temp_min','wind']
dataset['weather']=dataset['weather'].map({'rain':1,'drizzle':0,'fog':0,'sun':0,'snow':0})
target=['weather']




X = dataset[features]
Y = dataset[target]

model = linear_model.LinearRegression()
model.fit(X,Y)
predict3 = model.predict([[4.1,4.4,0.6,5.3]])
print(predict3)

print("Training Accuracy: {}".format(model.score(X, Y)))


X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.1)
#print(X_train)
#print(y_test)

regr=linear_model.LinearRegression()
regr.fit(X_train,y_train)
predict = regr.predict([[4.1,4.4,0.6,5.3]])
predict2 = regr.predict([[1.3,8.9,2.8,6.1]])
print(predict,predict2)


y_pred=regr.predict(X_test)
#print(y_pred)

# model evaluation

print('mean_squared_error : ', mean_squared_error(y_test, y_pred))
print('mean_absolute_error : ', mean_absolute_error(y_test, y_pred))



y1=y_test.to_numpy().flatten()  #y_test was a df therefore to numpy flatten method
y2=y_pred.flatten()
#print(y1)

df = pd.DataFrame({'Actual': y1, 'Predicted': y2})
print(df)
df1= df.head(25)
df1.plot(kind='bar', figsize=(16,10))
plt.grid(which='major', linestyle='-',linewidth='0.5',color='green' )
plt.grid(which='minor', linestyle=':',linewidth='0.5',color='black')
plt.show()

plt.scatter(y_test,y_pred,color = 'gray')
plt.plot(y_test,y_pred,color='red',linewidth=2)
plt.show()







# mae = magnitude of difference between the prediction of an observation and the true value of that observation.
# mse =  the average squared difference between the estimated values and true value.
